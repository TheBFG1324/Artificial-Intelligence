# Decision Stump Code Base
# MS Branicky, 2020-04-01

# 1. Title: 1984 United States Congressional Voting Records Database
# 
# 2. Source Information:
#     (a) Source:  Congressional Quarterly Almanac, 98th Congress, 
#                  2nd session 1984, Volume XL: Congressional Quarterly Inc. 
#                  Washington, D.C., 1985.
#     (b) Donor: Jeff Schlimmer (Jeffrey.Schlimmer@a.gp.cs.cmu.edu)
#     (c) Date: 27 April 1987 
# 
# 4. Relevant Information:
#       This data set includes votes for each of the U.S. House of
#       Representatives Congressmen on the 16 key votes identified by the
#       CQA.  The CQA lists nine different types of votes: voted for, paired
#       for, and announced for (these three simplified to yea), voted
#       against, paired against, and announced against (these three
#       simplified to nay), voted present, voted present to avoid conflict
#       of interest, and did not vote or otherwise make a position known
#       (these three simplified to an unknown disposition).
#
# 5. Number of Instances: 435 (267 democrats, 168 republicans)
#
# MSB NOTE: Any voting record (instance) that contained >=1 unknowns was removed.
# MSB NOTE: This left only 232 of the original 435 instances.
#
# 6. Number of Attributes: 16 + class name = 17 (all Boolean valued)
#
# MSB NOTE: All attribute values were changed to 0s and 1s as noted below
#
# 7. Attribute Information:
#   1. Class Name: 2 (0=democrat, 1=republican)
#   2. handicapped-infants: 2 (1=y,0=n)
#   3. water-project-cost-sharing: 2 (1=y,0=n)
#   4. adoption-of-the-budget-resolution: 2 (1=y,0=n)
#   5. physician-fee-freeze: 2 (1=y,0=n)
#   6. el-salvador-aid: 2 (1=y,0=n)
#   7. religious-groups-in-schools: 2 (1=y,0=n)
#   8. anti-satellite-test-ban: 2 (1=y,0=n)
#   9. aid-to-nicaraguan-contras: 2 (1=y,0=n)
#  10. mx-missile: 2 (1=y,0=n)
#  11. immigration: 2 (1=y,0=n)
#  12. synfuels-corporation-cutback: 2 (1=y,0=n)
#  13. education-spending: 2 (1=y,0=n)
#  14. superfund-right-to-sue: 2 (1=y,0=n)
#  15. crime: 2 (1=y,0=n)
#  16. duty-free-exports: 2 (1=y,0=n)
#  17. export-administration-act-south-africa: 2 (1=y,0=n)
#

N=232

table=[
    [0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1],
    [1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1],
    [1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1],
    [0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0],
    [0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1],
    [1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1],
    [0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1],
    [0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1],
    [0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1],
    [0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1],
    [0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1],
    [1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,1],
    [0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1],
    [0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1],
    [1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1],
    [0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1],
    [0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1],
    [0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1],
    [1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1],
    [0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0],
    [1,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1],
    [0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1],
    [0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1],
    [0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1],
    [1,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1],
    [0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1],
    [1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0],
    [0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1],
    [0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1],
    [1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1],
    [1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1],
    [0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1],
    [1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1],
    [1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1],
    [1,1,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1],
    [0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1],
    [1,1,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0],
    [1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1],
    [0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0],
    [0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1],
    [0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0],
    [0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0],
    [1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1],
    [0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1],
    [0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1],
    [0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1],
    [0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1],
    [0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1],
    [1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
]

from math import log2

def B(q):  
  if q==0 or q==1:
    return 0
  return -(q*log2(q)+(1-q)*log2(1-q))

# test the entropy function, see p. 704 of R&N
for q in [0, 1, 0.5, 0.99, 9/(9+5)]:
  print("q = %.3f, B(q) = %.3f" % (q, B(q)) )
print()
print("Gain(Patrons) = %.3f" % (1 - (2/12*B(0/2) + 4/12*B(4/4) + 6/12*B(2/6))) )
print("Gain(Type) = %.3f" % (1 - (2/12*B(1/2) + 2/12*B(1/2) + 4/12*B(2/4) + 4/12*B(2/4))) )

classatt = range(17)
# count the positive, negative examples for classication and each attribute
pos=[ sum([table[j][i]    for j in range(len(table))]) for i in classatt ] 
neg=[ sum([table[j][i]==0 for j in range(len(table))]) for i in classatt ] 

print()
for a in classatt:
    print("%d: \t%d \t%d \t%.4f" % (a+1, pos[a], neg[a], B(pos[a]/(pos[a]+neg[a]))))


def remainder(attribute_index):
    attribute_index -= 1  # Adjusting for 0-based index
    total = len(table)
    positive = [0, 0]  # [Dem Yes, Rep Yes]
    negative = [0, 0]  # [Dem No, Rep No]
    
    for record in table:
        if record[attribute_index] == 1:
            positive[record[0]] += 1
        else:
            negative[record[0]] += 1
    
    pos_total = sum(positive)
    neg_total = sum(negative)

    # Calculate entropy for positives and negatives separately
    pos_entropy = B(positive[0] / pos_total) if pos_total != 0 else 0
    neg_entropy = B(negative[0] / neg_total) if neg_total != 0 else 0

    # Weighted sum of entropies
    weighted_entropy = (pos_total / total) * pos_entropy + (neg_total / total) * neg_entropy
    return weighted_entropy



def gain(attribute_index):
    # Calculate initial entropy based on class distribution
    total = len(table)
    num_dems = sum(1 for record in table if record[0] == 0)
    initial_entropy = B(num_dems / total)
    
    # Calculate remainder using the adjusted function
    remainder_entropy = remainder(attribute_index)
    
    # Information gain is the initial entropy minus the weighted entropy of the split
    info_gain = initial_entropy - remainder_entropy
    return info_gain




def find_best_attribute():
    max_gain = 0
    best_attribute = 2  # Initial assumption, starting from the second attribute index

    print("Calculating information gain for each attribute:")
    for attribute_index in range(2, 18):  # Loop through each attribute index from 2 to 17
        current_gain = gain(attribute_index)  # Calculate the gain for the current attribute
        print(f"Attribute {attribute_index} (Gain = {current_gain:.4f})")  # Print the current attribute's gain
        
        # Check if the current gain is the greatest we've seen so far
        if current_gain > max_gain:
            max_gain = current_gain
            best_attribute = attribute_index  # Update the best attribute if the current one is better

    return best_attribute, max_gain




def build_decision_stump():
    best_attribute, _ = find_best_attribute()
    print(f"Best Attribute to split on: {best_attribute}")

    counts = [[0, 0], [0, 0]]  # [ [Dem Yes, Rep Yes], [Dem No, Rep No] ]
    for record in table:
        class_index = record[0]
        if record[best_attribute - 1] == 1:  # Adjust index when accessing record
            counts[0][class_index] += 1
        else:
            counts[1][class_index] += 1

    print(f"Counts for 'Yes' votes: Democrat={counts[0][0]}, Republican={counts[0][1]}")
    print(f"Counts for 'No' votes: Democrat={counts[1][0]}, Republican={counts[1][1]}")


build_decision_stump()
